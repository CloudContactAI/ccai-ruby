#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (c) 2025 CloudContactAI LLC
# Licensed under the MIT License. See LICENSE in the project root for license information.

require 'ccai'
require 'optparse'

options = {
  client_id: ENV['CCAI_CLIENT_ID'],
  api_key: ENV['CCAI_API_KEY'],
  first_name: nil,
  last_name: nil,
  phone: nil,
  email: nil,
  message: nil,
  title: 'CLI Test',
  image_path: nil,
  content_type: 'image/jpeg',
  type: 'sms', # sms, mms, or email
  subject: nil,
  sender_email: nil,
  reply_email: nil,
  sender_name: nil
}

OptionParser.new do |opts|
  opts.banner = "Usage: ccai [options]\n\nExamples:\n  # Send SMS\n  ccai --client-id YOUR_ID --api-key YOUR_KEY --first-name John --last-name Doe --phone +1234567890 --message \"Hello!\"\n\n  # Send MMS\n  ccai --type mms --client-id YOUR_ID --api-key YOUR_KEY --first-name John --last-name Doe --phone +1234567890 --message \"Check this out!\" --image image.jpg\n\n  # Send Email\n  ccai --type email --client-id YOUR_ID --api-key YOUR_KEY --first-name John --last-name Doe --email john@example.com --subject \"Hello\" --message \"<p>Hello John!</p>\" --sender-email sender@example.com --reply-email reply@example.com --sender-name \"Your Company\"\n"

  opts.on("--client-id ID", "CCAI client ID") do |v|
    options[:client_id] = v
  end

  opts.on("--api-key KEY", "CCAI API key") do |v|
    options[:api_key] = v
  end

  opts.on("--first-name NAME", "Recipient's first name") do |v|
    options[:first_name] = v
  end

  opts.on("--last-name NAME", "Recipient's last name") do |v|
    options[:last_name] = v
  end

  opts.on("--phone PHONE", "Recipient's phone number (E.164 format)") do |v|
    options[:phone] = v
  end

  opts.on("--email EMAIL", "Recipient's email address") do |v|
    options[:email] = v
  end

  opts.on("--type TYPE", "Message type: sms, mms, or email (default: sms)") do |v|
    options[:type] = v
  end

  opts.on("--subject SUBJECT", "Email subject (required for email)") do |v|
    options[:subject] = v
  end

  opts.on("--sender-email EMAIL", "Sender email address (required for email)") do |v|
    options[:sender_email] = v
  end

  opts.on("--reply-email EMAIL", "Reply-to email address (required for email)") do |v|
    options[:reply_email] = v
  end

  opts.on("--sender-name NAME", "Sender name (required for email)") do |v|
    options[:sender_name] = v
  end

  opts.on("--message MESSAGE", "Message content") do |v|
    options[:message] = v
  end

  opts.on("--title TITLE", "Campaign title") do |v|
    options[:title] = v
  end

  opts.on("--image PATH", "Path to image file for MMS (optional)") do |v|
    options[:image_path] = v
  end

  opts.on("--content-type TYPE", "Content type of the image file") do |v|
    options[:content_type] = v
  end

  opts.on("--version", "Show version information") do
    puts "CCAI Ruby Client v#{CCAI::VERSION}"
    exit
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

# Check required options based on message type
required = [:client_id, :api_key, :first_name, :last_name, :message]

case options[:type]
when 'email'
  required += [:email, :subject, :sender_email, :reply_email, :sender_name]
when 'mms'
  required += [:phone]
  if options[:image_path]
    required += [:content_type]
  end
else # sms
  required += [:phone]
end

missing = required.select { |param| options[param].nil? }

if missing.any?
  puts "Error: Missing required parameters: #{missing.join(', ')}"
  puts "Use --help for usage information"
  exit 1
end

# Initialize the client
client = CCAI.new(
  client_id: options[:client_id],
  api_key: options[:api_key]
)

# Create options with progress tracking
ccai_options = CCAI::SMS::Options.new(
  on_progress: ->(status) { puts "Progress: #{status}" }
)

# Send message based on type
begin
  response = case options[:type]
  when 'email'
    puts "Sending Email..."
    client.email.send_single(
      options[:first_name],
      options[:last_name],
      options[:email],
      options[:subject],
      options[:message],
      options[:sender_email],
      options[:reply_email],
      options[:sender_name],
      options[:title],
      ccai_options
    )
  when 'mms'
    puts "Sending MMS..."
    account = CCAI::SMS::Account.new(
      first_name: options[:first_name],
      last_name: options[:last_name],
      phone: options[:phone]
    )
    
    if options[:image_path]
      client.mms.send_with_image(
        options[:image_path],
        options[:content_type],
        [account],
        options[:message],
        options[:title],
        ccai_options
      )
    else
      puts "Error: Image path is required for MMS"
      exit 1
    end
  else # sms
    puts "Sending SMS..."
    account = CCAI::SMS::Account.new(
      first_name: options[:first_name],
      last_name: options[:last_name],
      phone: options[:phone]
    )
    
    client.sms.send(
      [account],
      options[:message],
      options[:title],
      ccai_options
    )
  end

  puts "Message sent successfully!"
  if response.respond_to?(:id) && response.id
    puts "ID: #{response.id}"
  end
  if response.respond_to?(:status) && response.status
    puts "Status: #{response.status}"
  end
  if response.respond_to?(:campaign_id) && response.campaign_id
    puts "Campaign ID: #{response.campaign_id}"
  elsif response.is_a?(Hash) && response['campaignId']
    puts "Campaign ID: #{response['campaignId']}"
  end
  if response.respond_to?(:messages_sent) && response.messages_sent
    puts "Messages sent: #{response.messages_sent}"
  elsif response.is_a?(Hash) && response['messagesSent']
    puts "Messages sent: #{response['messagesSent']}"
  end
rescue => e
  puts "Error: #{e.message}"
  exit 1
end
